
- Read some [[https://wiki.haskell.org/Research_papers/Functional_pearls][Functional Pearls]]

- Convert the [[http://tldp.org/LDP/abs/html/string-manipulation.html][horrors of Bash]] to the wonders of Turtle Haskell

- Web frameworks in Haskell.
  - Try out Scotty, Spock, Yesod, Snap.
    - http://www.yesodweb.com/book/yesod-for-haskellers
  - Write a REST/JSON client in Haskell (Twitter/GitHub client, say).
  - Write a REST/JSON server in Haskell.
  - Write a "sessionless" web app in Haskell.

- Understand/Demystify "Auto in Agda"

- Swift parser for Haskell
  - language-swift-quote

- argonaut-hs
  - Use TH to auto-generate encode/decode instances.

- Prove that total languages can safely use fusion (because they can evaluated non-strictly).

- Port otcc to Idris / F* / Haskell.

- Build "courseware" (aka course notes/slides):
  - Advanced Functional Programming
  - Dependently Typed Functional Programming (with Idris)
  - Compilers (for Functional Programming Languages)
  - Type Theory including Higher Type Theory (aka H[o]TT)

- Demystifying Compilers (aka course notes/slides for Compilers course)
  - blog series to replace "Let's write a compiler"
  - "The essense of compilation" compiling a simple language in the smallest possible compiler.
    (inspired by http://www.timphilipwilliams.com/posts/2014-05-22-the-essence-of-compilation.html)
  - skeleton
    - Introduction to language design with the BabyML.
    - Lexing/Parsing
    - Semantic Analysis (Type Checking)
    - Simple IL/IR generation
    - Backend
      - Simple IL interpreter/engine + runtime.
      - Compile to x86_64.
      - Compile to JS.
      - Compile to JVM.
      - Compile to CLR/CLI.

- Demystifying Programming Languages

- Demystifying Dependent Types (aka course notes/slides for Dependent Types course)

- Demystifying Automated Deduction (aka course notes/slides for Automated Deduction)
  - The theorem prover from ML for the Working Programmer.
  - Djinn walkthrough.

- Demystifying Proof Assistants
  - Introduction to Coq.
  - Introduction to Agda.
  - Introduction to Isabelle.
  - Introduction to Twelf.

- Nix or Package all the things
  - Nix for your dotfiles.
  - Nix for your development environment configuration.
  - Nix for your own tools (aka etools at Ephox).
  - Nix for your (proprietary) software products.

- Rational Startup Movement
  - Start writing up "The Rational Startup"
    - Using Haskell for a startup.
    - rational software tooling.
    - PureScript.
    - To Scala or not to Scala, yep, that's the question.

- Port [[https://twitter.com/li_haoyi][Li Haoyi]]'s Scala-JS examples to PureScript.
  - https://gist.github.com/lihaoyi/9443f8e0ecc68d1058ad
  - then Idris
  - then Glorious GHCJS

- Design and implement a Systems Programming Languages suitable for gamedev.

- Read "On Bullshit" "spoken word" as "performance art".

- Write an essay/book "On Money". inspired by "On Bullshit" and "On Assholes"

- Sell ADC shares. Carry forward huge capital loss on tax.
