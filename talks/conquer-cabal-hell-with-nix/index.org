** Conquer Cabal Hell with Nix

#+begin_html
<style>
  section.slide.level2.present {
    height: 455px;
  }
  .fa-terminal {
    color: green;
  }
</style>
#+end_html

#+begin_html
<div style="margin-top: 3em; position: absolute; bottom: 0; right: 0;">
#+end_html
[[http://steshaw.org/][@steshaw]]
#+begin_html
</div>
#+end_html

** Overview of talk

1. Purely Functional Package Systems
2. Overview of Nix
3. How to use Nix with Haskell


* Purely Functional Package Systems

** Features

- multiple variants of a package at the same time (i.e. side by side)
- immutable packages
- atomic upgrades/rollbacks
- mutiple environments
- usable as non-root

#+begin_comment
First, we'll introduce [[http://nixos.org/nix/][Nix]], a purely
functional package system, and highlight its advantages over widespread
systems such as [[https://wiki.debian.org/Apt][APT]].
#+end_comment

** Examples

- [[http://nixos.org][Nix]]
- [[http://0install.net][Zero Install]]
- [[http://listaller.tenstral.net/][Listaller]] (was Autopackage)


* Nix

- Source-based with "binary replacement".
- Scales up to entire Linux distribution. See NixOS.
- Written in C++ and Perl but looks like a Haskell port is in the works.
- Popular in the Haskell community.


** Commands

Find packages
#+begin_src shell_session
$ nix-env --query --available 'hello*'
$ nix-env -qa 'hello*'
#+end_src

Install a package
#+begin_src shell_session
$ nix-env --install hello
$ nix-env -i hello
#+end_src

Remove a package
#+begin_src shell_session
$ nix-env --uninstall hello
$ nix-env -e hello
#+end_src


** Commands (continued)

Alternatively rollback
#+begin_src shell_session
$ nix-env --rollback
#+end_src

Upgrade your packages
#+begin_src shell_session
$ nix-env --upgrade
#+end_src


** Accelerating Haskell Development with Nix

#+begin_html
<p>
  <i class="fa fa-terminal"></i> <b>demo time</b>
</p>
#+end_html

#+BEGIN_COMMENT
<div class="notes">

Finally, we'll learn how conquer Cabal hell and accelerate your Haskell
development with Nix. We'll set up Nix for Haskell development.
Configure Nix environments containing all your favourite Haskell
development tools. Most importantly, pull in library dependencies
without recompiling all of hackage. Discover that there's no need to
decide between per-project and shared sandboxes --- you get to have your
cake and eat it too!
</div>


*** Installing ghc-mod

[[http://stackoverflow.com/questions/24228402/nixos-and-ghc-mod-module-not-found][How to install ghc-mod on NixOS]]

OR perhaps this will work:

#+begin_src shell
nix-env --install haskell-ghc-mod-ghc7.8.4
#+end_src haskell

#+END_COMMENT



* Notes (work in progress)

** Nix Features

  - Add more Nix features from http://nixos.org/nix/about.html
  - Diagrams!


** Architecture of Nix

*Under the hood a little bit*

  - /nix/store
  - Mention the crazy linker thing.
  - How hashing works. Why binary substiution works.
  - A -> B. What are the inputs?
    - What inputs?
    - What outputs?
    - hashing for the store
  - Caching/Memoisation.

** Nix Commands
  - Installing haskell tools like ghc (different versions) and nix2cabal.
  - Usage of nix-shell
  - Usage of nix2cabal

* Accelerating Haskell Development with Nix

** Where are we now?

  - Using cabal sandboxes.
  - Perhaps some shared sandboxes.
  - Waiting for builds is no fun.
  - Wasting time building `lens` for each of your projects that uses it is not good.
  - Let's not accept the status quo.
  - One option is to use Halcyon -- a build cache for Cabal.

** What's not good?

  - Long build times.
  - Building the same dependencies over and over again in different sandboxes.
  - These sandboxes could be on your machine or your team members machine.
  - Or on the build box.
  - There is wastage of time but also of disk space.
  - With SSDs, disk space isn't as cheap as it used to be.


** Demo

- Instant `lens` environment.
- Instant `reflex` environment with tryreflex. https://github.com/ryantrinkle/try-reflex
- Work through hutton-razor.


** Downsides of Nix.

- Still early (but you'd be getting in at a great time)
- Written in C++ and Perl (HT [[https://plus.google.com/+RaahulKumar2014/posts][Raahul Kumar]] for pointing out that it's C++ not C).
- Perhaps there's hope for a Haskell implementation --- https://github.com/jwiegley/hnix.


** Nix Workshop at Hack Night

- Get set up with NixOS (and perhaps Nix on Mac/Linux/*BSD if you're more adventurous).
- Learn how to set up a modern Haskell development environment.
- Hopefully, learn how to work on sources to multiple dependencies in your tree.


** References

- [[http://ocharles.org.uk][Ollie Charles]]
  - [[https://ocharles.org.uk/blog/posts/2014-02-04-how-i-develop-with-nixos.html][How I develop with Nix]]
  - http://wiki.ocharles.org.uk/Nix
- [[http://cryp.to/][Peter Simons]]
  - [[https://youtu.be/BsBhi_r-OeE][Nix loves Haskell]] — [[http://cryp.to/nixos-meetup-3-slides.pdf][slides]] — [[https://github.com/NixOS/cabal2nix/blob/master/doc/nixos-meetup-3-slides.md][slides.md]]
  - [[https://github.com/NixOS/cabal2nix/blob/master/doc/user-guide.md][Haskell User Guide for Nixpkgs]]


- https://nixos.org/nix/manual/
